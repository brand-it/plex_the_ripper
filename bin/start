#!/usr/bin/env sh
set -e

# Variables
RUNNING=1
FIRST_START=1
SERVER_EXIT_CODE=0
URL="http://localhost:8080"
HEALTH_CHECK_URL="http://localhost:8080/system/health"

# Define paths
if [ -z "$1" ]; then
  APP_SUPPORT_DIR="$HOME/Library/Application Support/PlexTheRipperMac"
else
  APP_SUPPORT_DIR="$1"
fi
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
UPDATE_SCRIPT="$APP_SUPPORT_DIR/bin/update_latest_release"
SETUP_SCRIPT="$APP_SUPPORT_DIR/bin/setup"
RAILS_SCRIPT="$APP_SUPPORT_DIR/bin/rails"

# Ensure the Application Support directory exists
mkdir -p "$APP_SUPPORT_DIR/bin"

cp "$SCRIPT_DIR/update_latest_release" "$UPDATE_SCRIPT"

# Ensure scripts are executable
chmod +x "$UPDATE_SCRIPT"

check_health() {
  STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_CHECK_URL)
  if [ "$STATUS_CODE" -eq 200 ]; then
    return 0
  else
    return 1
  fi
}

# Function to start the web server
start_server() {
  export RAILS_ENV=production

  echo "Running update_latest_release..."
  "$UPDATE_SCRIPT" "$APP_SUPPORT_DIR"

  echo "Running setup..."
  "$SETUP_SCRIPT"

  echo "Starting Rails server..."
  "$RAILS_SCRIPT" server -b 0.0.0.0 -p 8080 -e production &
  SERVER_PID=$!

  if [ $FIRST_START -eq 1 ]; then
    echo "Checking server health..."
    until check_health; do
      echo "Waiting for server to be healthy..."
      sleep 1
    done
    echo "Opening web page in default browser..."
    if command -v xdg-open > /dev/null; then
      xdg-open $URL
    elif command -v open > /dev/null; then
      open $URL
    else
      echo "Could not detect the command to open the browser."
    fi
    FIRST_START=0
  fi

  wait $SERVER_PID
  SERVER_EXIT_CODE=$?
}

# Main loop to handle restarts
while [ $RUNNING -eq 1 ]; do
  echo "Starting up Server"
  start_server
  if [ $SERVER_EXIT_CODE -eq 1 ]; then
    RUNNING=0
  fi
done

echo "Shutting down server..."
exit 0
